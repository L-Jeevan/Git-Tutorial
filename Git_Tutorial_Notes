# üìÇ Version Control System (VCS) ‚Äì Notes

## üîë Primary Concepts of VCS

Definition : A version control system (VCS) is software that tracks and manages changes to files (primarily source code) over time,
allowing teams to collaborate, revert to previous versions, and easily track changes. 

1. **Sharing Code**
2. **Versioning**

---

## 1Ô∏è‚É£ Sharing Code

üë®‚Äçüíª **Scenario**: Two developers are working on a Calculator application.  
- Developer A is building the *Addition* feature  
- Developer B is building the *Subtraction* feature  
Once they‚Äôre done, both need to **merge** their code into a single project.

üìå For small projects, you might share code over Gmail or file transfer.  
‚ö†Ô∏è But in **real-world software development**, projects involve:
- Multiple files
- Frequent updates
- Team collaboration

‚úÖ A **Version Control System** helps manage this code sharing and integration efficiently.

---

## 2Ô∏è‚É£ Versioning

üîÑ Suppose Developer A initially wrote a method to add two numbers. Later, they modify it to support adding three or four numbers.  
But the **customer prefers the original version** (adding only two numbers).

üìå In this case, we need a way to **switch back to the older version of the code**.

### ‚úÖ Benefits of Versioning:
- Track changes made daily
- View what was modified and when
- Switch between multiple versions easily

---

## üõ† Popular Version Control Systems

- CVS *(Centralized)*
- SVN *(Centralized)*
- **Git** *(Distributed)* ‚Üí ‚úÖ Most widely used today

---

## üß† Centralized vs Distributed VCS

### üîó Centralized (e.g., CVS, SVN)

- All developers connect to a **single central server**
- Example:
  - Developer A uploads code to the central server
  - Developer B downloads from that server

‚ùå If the central server goes down, collaboration stops

---

### üåê Distributed (e.g., Git)

- Every developer has a **local copy** of the repository
- Developer A can share code with Developer B directly or through **forks** (copies)
- Multiple developers can collaborate independently

‚úÖ More fault-tolerant  
‚úÖ Faster operations (done locally)

---

## üîÑ What is a Fork? *(Interview Important)*

> A **fork** is a copy of a repository.

üìå Used when you want to:
- Work independently on a copy
- Propose changes without affecting the original code

üßë‚Äçüíª Example:
If a company hosts its source code in a GitHub repository called `example`, another user can fork it.  
They now have their own version of the code to work on.

---

## üÜö Git vs GitHub

### üß∞ Git
  Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.
- Open-source **version control tool**
- Can be installed on your own server (e.g., EC2 instance)
- Helps track and manage code locally

### ‚òÅÔ∏è GitHub / GitLab / Bitbucket
- Platforms **built on top of Git**
- Offer:
  - Remote repositories
  - UI for commits/issues
  - Collaboration tools (PRs, comments)
  - Project & team management features

Git is a version control system, while GitHub and GitLab are web-based platforms that host Git repositories,
offering features like collaboration, code management, and CI/CD pipelines, with GitLab focusing on a more comprehensive DevOps approach

‚úÖ Git manages **how** code changes  
‚úÖ GitHub manages **where** and **how teams work together**

---
Additional Reference: https://about.gitlab.com/topics/version-control/
---

> ‚úçÔ∏è **Note**: These concepts are critical for interviews and real-world software development workflows. Make sure you're comfortable with both Git commands and GitHub platform features.
